--- frameworks/base/core/java/android/hardware/Camera.java	2017-10-26 16:06:44.522711730 +1100
+++ frameworks/base/core/java/android/hardware/Camera.java	2017-10-26 16:14:26.276711730 +1100
@@ -15,6 +15,18 @@
  */
 
 package android.hardware;
+import android.hardware.camera2.CameraCharacteristics;
+import android.hardware.camera2.impl.CameraMetadataNative;
+import android.hardware.camera2.CaptureResult;
+import android.hardware.camera2.CaptureRequest.Builder;
+import android.hardware.camera2.CaptureRequest;
+import android.hardware.camera2.impl.CaptureResultExtras;
+import android.hardware.camera2.CameraManager;
+import android.content.Context;
+import java.lang.System;
+import java.io.ByteArrayInputStream;
+import java.io.ObjectInputStream;
+import android.hardware.ICameraService;
 
 import android.app.ActivityThread;
 import android.annotation.SdkConstant;
@@ -194,6 +206,94 @@
     private CameraMetaDataCallback mCameraMetaDataCallback;
     /* ### QC ADD-ONS: END */
 
+    private static final int CAMERA_MSG_AEC = 0x10000;
+    private static final int CAMERA_MSG_DNG_IMAGE= 0x20000;
+    private static final int CAMERA_MSG_DNG_META_DATA = 0x40000;
+    private static final int CAMERA_MSG_IN_PROCESSING = 0x80000;
+    private static final int CAMERA_MSG_STATE_CALLBACK = 0x100000;
+    private static final int CAMERA_MSG_RAW_IMAGE_DUMMY = 0x120000;
+
+    private static CameraMetadataNative mMetadata;
+    private long mMetadataPtr; 
+    private CameraCharacteristics mCharacteristics;
+    private android.hardware.Camera.AECallback mAECallback;
+    private android.hardware.Camera.OneplusCallback mOneplusCallback;
+    private android.hardware.Camera.ProcessCallback mProcessCallback;
+    private boolean mIsOPService = false;
+    private android.hardware.Camera.PictureCallback mOPServiceJpegCallback = null;
+    private android.hardware.Camera.CameraStateCallback mCameraStateCallback;
+
+    public interface AECallback {
+
+        public abstract void onAEChanged(int[] p1, Camera p2);
+
+    }
+
+    public interface OneplusCallback {
+
+        public abstract void onDngImage(byte[] p1, Camera p2);
+
+        public abstract void onDngMetadata(CameraCharacteristics p1, CaptureResult p2, Camera p3);
+
+    }
+
+    public interface ProcessCallback {
+
+        public abstract void onProcess();
+
+    }
+
+    public interface CameraStateCallback {
+
+        public abstract void onCameraStateChanged(byte[] p1, Camera p2);
+
+    }
+
+    public void setAECallback(AECallback cb) {
+        mAECallback = cb;
+    }
+    
+    public final void setOneplusCallback(OneplusCallback cb) {
+        mOneplusCallback = cb;
+    }
+    
+    public final void setProcessCallback(ProcessCallback cb) {
+        mProcessCallback = cb;
+    }
+    
+    public void setOPJpegCallback(PictureCallback cb) {
+        mOPServiceJpegCallback = cb;
+    }
+    
+    public final void addDngImageCallbackBuffer(byte[] cb) {
+        addRawImageCallbackBuffer(cb);
+    }
+
+    public final void setCameraStateCallback(CameraStateCallback cb) {
+        mCameraStateCallback = cb;
+    }
+    
+    public static Camera openOPService() {
+        return new Camera(0, -0x64);
+    }
+
+    private void getNativeCameraMetadata(int camID){
+    try{
+        ActivityThread am = ActivityThread.currentActivityThread();
+    
+        CameraManager manager = (CameraManager) am.
+        getApplication()
+        .getSystemService(Context.CAMERA_SERVICE);
+        String [] a=manager.getCameraIdList();
+        mCharacteristics = manager.getCameraCharacteristics(a[camID]);
+
+        }catch(Exception exc){
+            Log.e(TAG,"getNativeCameraMetadata error");
+            mCharacteristics = null;
+        }                
+
+    }
+
     /**
      * Broadcast Action:  A new picture is taken by the camera, and the entry of
      * the picture has been added to the media store.
@@ -529,6 +629,8 @@
         mCameraDataCallback = null;
         mCameraMetaDataCallback = null;
         /* ### QC ADD-ONS: END */
+        mOneplusCallback = null;
+        mProcessCallback = null;
 
         Looper looper;
         if ((looper = Looper.myLooper()) != null) {
@@ -827,6 +929,7 @@
         mRawImageCallback = null;
         mPostviewCallback = null;
         mJpegCallback = null;
+        mProcessCallback = null;
         synchronized (mAutoFocusCallbackLock) {
             mAutoFocusCallback = null;
         }
@@ -1167,7 +1270,13 @@
 
         @Override
         public void handleMessage(Message msg) {
-            switch(msg.what) {
+            int msgID=msg.what;
+
+            if(msgID==CAMERA_MSG_RAW_IMAGE){
+                msgID=CAMERA_MSG_DNG_IMAGE;
+            }
+
+            switch(msgID) {
             case CAMERA_MSG_SHUTTER:
                 if (mShutterCallback != null) {
                     mShutterCallback.onShutter();
@@ -1184,6 +1293,10 @@
                 if (mJpegCallback != null) {
                     mJpegCallback.onPictureTaken((byte[])msg.obj, mCamera);
                 }
+                else if(mIsOPService&&mOPServiceJpegCallback != null){
+                    Log.d(TAG,"op jpeg callback");
+                    mOPServiceJpegCallback.onPictureTaken((byte[])msg.obj, mCamera);
+                }
                 return;
 
             case CAMERA_MSG_PREVIEW_FRAME:
@@ -1262,6 +1375,51 @@
                 }
                 return;
             /* ### QC ADD-ONS: END */
+            case CAMERA_MSG_RAW_IMAGE_DUMMY:
+//                Log.d(TAG,"CAMERA_MSG_RAW_IMAGE_DUMMY");
+                return;
+
+            case CAMERA_MSG_AEC:
+//                Log.d(TAG,"CAMERA_MSG_AEC");
+                if (mAECallback != null) {
+                    int [] states=new int[2];
+                    states[0]=msg.arg1;
+                    states[1]=msg.arg2;
+                    mAECallback.onAEChanged(states,mCamera);
+                }
+                return;
+                
+            case CAMERA_MSG_DNG_IMAGE:
+//                Log.d(TAG,"CAMERA_MSG_DNG_IMAGE");
+                if (mOneplusCallback != null) {
+                    mOneplusCallback.onDngImage((byte[])msg.obj, mCamera);
+                }
+                return;
+                
+            case CAMERA_MSG_DNG_META_DATA:
+//                Log.d(TAG,"CAMERA_MSG_DNG_META_DATA");
+                if (mOneplusCallback != null
+                    &&mMetadata!=null) {
+                    mCharacteristics = new CameraCharacteristics(new CameraMetadataNative(mMetadata));
+                    CaptureResult result=new CaptureResult(new CameraMetadataNative(mMetadata),-1);
+                    mOneplusCallback.onDngMetadata(mCharacteristics, result, mCamera);
+                }    
+            return;
+            
+            case CAMERA_MSG_IN_PROCESSING:
+//                Log.d(TAG,"CAMERA_MSG_IN_PROCESSING");
+                if (mProcessCallback != null) {
+                    mProcessCallback.onProcess();
+                }
+                return;
+
+            case CAMERA_MSG_STATE_CALLBACK:
+//                Log.d(TAG,"CAMERA_MSG_STATE_CALLBACK");
+                if (mCameraStateCallback != null) {
+		    mCameraStateCallback.onCameraStateChanged((byte[])msg.obj, mCamera);
+		}
+                return;
+
             default:
                 Log.e(TAG, "Unknown message type " + msg.what);
                 return;
@@ -1539,6 +1697,27 @@
         if (mJpegCallback != null) {
             msgType |= CAMERA_MSG_COMPRESSED_IMAGE;
         }
+        //oneplus camera mod
+        if (mOneplusCallback != null) {
+            msgType |= CAMERA_MSG_DNG_META_DATA;
+            msgType |= CAMERA_MSG_DNG_IMAGE;
+            mMetadata = new CameraMetadataNative();
+
+            try{
+                java.lang.reflect.Field ptrField = CameraMetadataNative.class.  
+                getDeclaredField("mMetadataPtr");  
+                ptrField.setAccessible(true);
+                mMetadataPtr = (long) ptrField.get(mMetadata);
+                }
+                catch(Exception x){
+                    
+                };
+
+        }
+  
+        if (mProcessCallback != null) {
+            msgType |= CAMERA_MSG_IN_PROCESSING;
+        }
 
         native_takePicture(msgType);
         mFaceDetectionRunning = false;
@@ -3738,6 +3917,17 @@
          * @see #getFlashMode()
          */
         public List<String> getSupportedFlashModes() {
+
+            String packageName = ActivityThread.currentOpPackageName();
+
+	    if (packageName != null) {
+		String focusMode = getFocusMode();
+
+		if ((focusMode != null) && (focusMode.equals("fixed")) && (!packageName.equals("com.oneplus.camera"))) {
+		    return null;
+		}
+	    }
+
             String str = get(KEY_FLASH_MODE + SUPPORTED_VALUES_SUFFIX);
             return split(str);
         }
