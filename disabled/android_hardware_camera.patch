--- frameworks/base/core/jni/android_hardware_Camera.cpp	2017-10-09 14:47:59.151945708 +1100
+++ frameworks/base/core/jni/android_hardware_Camera.cpp	2017-10-26 15:56:39.401711730 +1100
@@ -43,6 +43,7 @@
 
 struct fields_t {
     jfieldID    context;
+    jfieldID    metadata_ptr;
     jfieldID    facing;
     jfieldID    orientation;
     jfieldID    canDisableShutterSound;
@@ -66,6 +67,7 @@
 
 static fields_t fields;
 static Mutex sLock;
+static CameraMetadata* mMeta_ptr;
 
 // provides persistent context for calls from native code to Java
 class JNICameraContext: public CameraListener
@@ -276,7 +275,12 @@
                         return;
                     }
                 }
-            } else {
+            } else if(msgType == 0x10000) {
+                camera_metadata_t * cMetaData = reinterpret_cast<camera_metadata_t*>(heapBase + offset);
+                *mMeta_ptr=(const camera_metadata_t*)cMetaData;
+                mMeta_ptr->sort();
+            }
+            else {
                 ALOGV("Allocating callback buffer");
                 obj = env->NewByteArray(size);
             }
@@ -896,6 +890,7 @@
     JNICameraContext* context;
     sp<Camera> camera = get_native_camera(env, thiz, &context);
     if (camera == 0) return;
+    mMeta_ptr=reinterpret_cast<android::CameraMetadata*>(env->GetLongField(thiz,fields.metadata_ptr));
 
     /*
      * When CAMERA_MSG_RAW_IMAGE is requested, if the raw image callback
@@ -1206,6 +1201,7 @@
 {
     field fields_to_find[] = {
         { "android/hardware/Camera", "mNativeContext",   "J", &fields.context },
+        { "android/hardware/Camera", "mMetadataPtr",   "J", &fields.metadata_ptr },
         { "android/hardware/Camera$CameraInfo", "facing",   "I", &fields.facing },
         { "android/hardware/Camera$CameraInfo", "orientation",   "I", &fields.orientation },
         { "android/hardware/Camera$CameraInfo", "canDisableShutterSound",   "Z",
